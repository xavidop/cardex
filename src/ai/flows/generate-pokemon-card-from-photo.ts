// This file is automatically generated - edits will be lost!
'use server';

/**
 * @fileOverview Uses Google Imagen4 to generate Pokemon cards based on an uploaded photo reference.
 *
 * - generatePokemonCardFromPhoto - A function that handles the photo-based card generation process.
 * - GenerateFromPhotoInput - The input type for the generatePokemonCardFromPhoto function.
 * - GenerateFromPhotoOutput - The return type for the generatePokemonCardFromPhoto function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import OpenAI from 'openai';
import { getUserApiKeys } from '@/lib/firestore';

const GenerateFromPhotoInputSchema = z.object({
  userId: z.string().min(1, "User ID is required"),
  photoDataUri: z
    .string()
    .describe(
      "A reference photo as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  pokemonName: z.string().min(1, "Pokemon name is required"),
  pokemonType: z.string().min(1, "Pokemon type is required"),
  styleDescription: z.string().min(10, "Style description is required - describe how to adapt the photo"),
  language: z.enum(['english', 'japanese', 'chinese', 'korean', 'spanish', 'french', 'german', 'italian']).default('english'),
  hp: z.number().min(10).max(999).optional().default(130),
  attackName1: z.string().optional().default("Quick Attack"),
  attackDamage1: z.number().min(0).max(999).optional().default(60),
  attackName2: z.string().optional().default("Special Move"),
  attackDamage2: z.number().min(0).max(999).optional().default(90),
  weakness: z.string().optional().default("Fighting"),
  resistance: z.string().optional().default("Psychic"),
  retreatCost: z.number().min(0).max(5).optional().default(2),
});

export type GenerateFromPhotoInput = z.infer<typeof GenerateFromPhotoInputSchema>;

const GenerateFromPhotoOutputSchema = z.object({
  imageBase64: z.string().describe("The generated card image as base64 string").optional(),
  prompt: z.string().describe("The prompt used to generate the card").optional(),
  error: z.string().describe("Error message if the card could not be generated").optional()
});

export type GenerateFromPhotoOutput = z.infer<typeof GenerateFromPhotoOutputSchema>;

export async function generatePokemonCardFromPhoto(input: GenerateFromPhotoInput): Promise<GenerateFromPhotoOutput> {
  return generateFromPhotoFlow(input);
}

const generateFromPhotoFlow = ai.defineFlow(
  {
    name: 'generateFromPhotoFlow',
    inputSchema: GenerateFromPhotoInputSchema,
    outputSchema: GenerateFromPhotoOutputSchema,
  },
  async (params: GenerateFromPhotoInput) => {
    try {
      // Get user's API keys from Firestore
      const userApiKeys = await getUserApiKeys(params.userId);
      const apiKey = userApiKeys?.openaiApiKey || process.env.OPENAI_API_KEY;
      
      if (!apiKey) {
        return { 
          error: 'OpenAI API key is required. Please configure your API key in Settings or set OPENAI_API_KEY environment variable.' 
        };
      }

      const openai = new OpenAI({
        apiKey: apiKey,
      });

      // Generate the detailed prompt for the Pokemon card based on photo
      console.log("Generating Pokemon card using reference photo...");
      
      // Generate the enhanced prompt for the Pokemon card
      const enhancedPrompt = generatePhotoBasedCardPrompt(params);
      console.log("Generated prompt for image generation:", enhancedPrompt);

      // Use OpenAI responses.create with reference image for image generation
      const response = await openai.responses.create({
        model: "gpt-4.1",
        input: [
          {
            role: "user",
            content: [
              { type: "input_text", text: enhancedPrompt },
              {
                type: "input_image",
                image_url: params.photoDataUri,
                detail: "high"
              },
            ],
          },
        ],
        tools: [{ type: "image_generation" }],
      });

      const imageData = response.output
        .filter((output) => output.type === "image_generation_call")
        .map((output) => output.result);

      if (imageData.length > 0) {
        const imageBase64 = imageData[0];
        return {
          imageBase64: imageBase64 || "",
          prompt: enhancedPrompt,
        };
      } else {
        console.log("No image generated, response output:", response.output);
        return { error: 'No image generated from the reference photo.' };
      }
    } catch (error: any) {
      console.error('Error generating Pokemon card from photo:', error);
      return { error: `Failed to generate Pokemon card: ${error?.message || 'Unknown error'}` };
    }
  }
);

function generatePhotoBasedCardPrompt(params: GenerateFromPhotoInput): string {
  const {
    pokemonName,
    pokemonType,
    styleDescription,
    language,
    hp = 130,
    attackName1 = "Quick Attack",
    attackDamage1 = 60,
    attackName2 = "Special Move",
    attackDamage2 = 90,
    weakness = "Fighting",
    resistance = "Psychic",
    retreatCost = 2
  } = params;

  const languageInstruction = language !== 'english' ? `Write all card information in ${language}. The Pokemon name, attacks and description should be translated accordingly.` : '';

  return `A regular classic Pokémon trading card (not full art), featuring the Pokémon "${pokemonName}". Use the reference image as inspiration and adapt it to create a Pokemon card illustration. Use the base photo, but in Studio Ghibli style, ${styleDescription}

The card has a standard vertical layout with a detailed illustration in the main area. The Pokemon "${pokemonName}", a ${pokemonType} type, should be depicted as the main subject, incorporating elements and style from the reference photo.

The card layout includes: The top left corner displays "${pokemonName}" in a stylized font, with "HP ${hp}" next to it in red. Below the Pokémon's name, the ${pokemonType} type symbol is clearly visible. In the lower section, the card has two attacks listed. The first attack is ${attackName1} and should be written in ${language}, deals ${attackDamage1} damage. The second attack is ${attackName2} and should be written in ${language}, deals ${attackDamage2} damage.

Below the attacks, the Weakness is ${weakness} (x2), Resistance is ${resistance} (-30), and Retreat Cost shows ${retreatCost} energy symbols. The bottom edge of the card features a thin line of text indicating the rarity and copyright information.

${languageInstruction}

The overall style should match official Pokémon TCG card design with proper fonts, layout, and professional quality artwork, while incorporating the visual style and elements from the reference photo.
Make sure the information is displayed clearly and the Pokemon illustration feels natural within the adapted photographic style.`;
}
