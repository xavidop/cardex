// This file is automatically generated - edits will be lost!
'use server';

/**
 * @fileOverview Uses Gemini Vision to scan and identify a Pokemon card's name, set, and rarity.
 *
 * - scanPokemonCard - A function that handles the card scanning process.
 * - ScanPokemonCardInput - The input type for the scanPokemonCard function.
 * - ScanPokemonCardOutput - The return type for the scanPokemonCard function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ScanPokemonCardInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a Pokemon card, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ScanPokemonCardInput = z.infer<typeof ScanPokemonCardInputSchema>;

const ScanPokemonCardOutputSchema = z.object({
  cardDetails: z.object({
    name: z.string().describe("The name of the Pokemon card.").optional(),
    set: z.string().describe("The first set the Pokemon card belongs to.").optional(),
    rarity: z.string().describe("The rarity of the Pokemon card.").optional(),
  }).describe("Details about the Pokemon card.").optional(),
  error: z.string().describe("Error message if the card could not be identified.").optional()
});

export type ScanPokemonCardOutput = z.infer<typeof ScanPokemonCardOutputSchema>;

export async function scanPokemonCard(input: ScanPokemonCardInput): Promise<ScanPokemonCardOutput> {
  return scanPokemonCardFlow(input);
}

const scanPokemonCardPrompt = ai.definePrompt({
  name: 'scanPokemonCardPrompt',
  input: {schema: ScanPokemonCardInputSchema},
  output: {schema: ScanPokemonCardOutputSchema},
  prompt: `You are an expert Pokemon card appraiser. Use the following image to identify the card's name, first set it was introduced in, and rarity. If you are unable to determine any of these values, leave them blank.\n
  Photo: {{media url=photoDataUri}}
  \n
  Respond using the following format:
  {
    "cardDetails": {
      "name": "Pokemon card name",
      "set": "Pokemon first card set it was introduced in",
      "rarity": "Pokemon card rarity"
    }
  }
  \nIf you cannot identify the Pokemon card or if the image does not contain a Pokemon card, respond with the following format:
  {
    "error": "Error message describing why the card could not be identified"
  }`,
});

const scanPokemonCardFlow = ai.defineFlow(
  {
    name: 'scanPokemonCardFlow',
    inputSchema: ScanPokemonCardInputSchema,
    outputSchema: ScanPokemonCardOutputSchema,
  },
  async input => {
    try {
      const {output} = await scanPokemonCardPrompt(input);
      return output!;
    } catch (error: any) {
      console.error('Error during card scanning:', error);
      return {error: 'Failed to scan Pokemon card.'};
    }
  }
);
